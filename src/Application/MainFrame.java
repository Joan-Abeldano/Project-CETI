/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Application;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Joan
 */
public class MainFrame extends javax.swing.JFrame {
    
    private String userLogin;
    private String passwordLogin;
    private LocalDate fechaActual;
    private BorrowingInfo bc;
    /**
     * Creates new form MainFrame
     */
public MainFrame(boolean x, String user, String password) {
    initComponents();
    addItemDialog.setLocationRelativeTo(null);
    this.userLogin = user;
    this.passwordLogin = password;
    userMenu.setText(userLogin);

    // Si x es false, ocultar los elementos del menú
    if (!x) {
        addUserItem.setVisible(false);
        importCsvItem.setVisible(false);
        addItemItem.setVisible(false);
    }

    addWindowListener(new WindowAdapter() {
        @Override
        public void windowClosing(WindowEvent e) {
            // Mostrar el mensaje de confirmación
            int respuesta = JOptionPane.showConfirmDialog(
                    MainFrame.this,
                    "¿Estás seguro de que deseas salir?",
                    "Confirmar salida",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE
            );

            // Si el usuario selecciona "Sí", cerrar el programa
            if (respuesta == JOptionPane.YES_OPTION) {
                System.exit(0);
            }
            // Si selecciona "No", no pasa nada (la ventana permanece abierta)
        }
    });
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        addBorrowingDialog = new javax.swing.JDialog();
        addBorrowingScreenPanel = new javax.swing.JPanel();
        personNameInput = new javax.swing.JTextField();
        personGroupInput = new javax.swing.JTextField();
        itemInput = new javax.swing.JTextField();
        addBorrowingConfirmButton = new javax.swing.JButton();
        dateLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        groupLabel = new javax.swing.JLabel();
        itemLabel = new javax.swing.JLabel();
        personLastNameInput = new javax.swing.JTextField();
        lastNameLabel = new javax.swing.JLabel();
        startDateInput = new com.toedter.calendar.JDateChooser();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jLabel16 = new javax.swing.JLabel();
        borrowingInfoDialog = new javax.swing.JDialog();
        borrowingInfoScreenPanel = new javax.swing.JPanel();
        itemInventoryInfoLabel = new javax.swing.JLabel();
        nameInfoLabel = new javax.swing.JLabel();
        lastNameInfoLabel = new javax.swing.JLabel();
        groupInfoLabel = new javax.swing.JLabel();
        startDateInfoLabel = new javax.swing.JLabel();
        endDateInfoLabel = new javax.swing.JLabel();
        borrowerInfoLabel = new javax.swing.JLabel();
        endBorrowingGoToButton = new javax.swing.JButton();
        endBorrowingDialog = new javax.swing.JDialog();
        endBorrowingScreenPanel = new javax.swing.JPanel();
        endBorrowingButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        endDateInput = new com.toedter.calendar.JDateChooser();
        addItemDialog = new javax.swing.JDialog();
        addBorrowingScreenPanel1 = new javax.swing.JPanel();
        addBorrowingConfirmButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        inventarioInput = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        posesionInput = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        grupoInput = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        categoriaInput = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        subcategoriaInput = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        tipoInput = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        marcaInput = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        modeloInput = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        serieInput = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        colorInput = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        precioInput = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        estadoInput = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        propietarioInput = new javax.swing.JTextField();
        mainScreenPanel = new javax.swing.JPanel();
        addBorrowingButton = new javax.swing.JButton();
        viewCurrentBorrowingsButton = new javax.swing.JButton();
        viewHistoryButton = new javax.swing.JButton();
        viewInventoryButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        currentBorrowingsScreenPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        currentBorrowingsFullTable = new javax.swing.JTable();
        backCurrentBorrowingsScreenButton = new javax.swing.JButton();
        historyScreenPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        borrowingsHistoryTable = new javax.swing.JTable();
        backHistoryScreenButton = new javax.swing.JButton();
        inventoryScreenPanel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        backInventoryScreenButton = new javax.swing.JButton();
        mainMenuBar = new javax.swing.JMenuBar();
        userMenu = new javax.swing.JMenu();
        addUserItem = new javax.swing.JMenuItem();
        endSessionItem = new javax.swing.JMenuItem();
        borrowingsMenu = new javax.swing.JMenu();
        addBorrowingItem = new javax.swing.JMenuItem();
        inventoryMenu = new javax.swing.JMenu();
        viewInventoryItem = new javax.swing.JMenuItem();
        importCsvItem = new javax.swing.JMenuItem();
        addItemItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutUsItem = new javax.swing.JMenuItem();

        addBorrowingDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addBorrowingDialog.setTitle("Añadir Prestamo");
        addBorrowingDialog.setMinimumSize(new java.awt.Dimension(338, 300));
        addBorrowingDialog.setModal(true);
        addBorrowingDialog.setResizable(false);
        addBorrowingDialog.setSize(new java.awt.Dimension(600, 300));
        addBorrowingDialog.getContentPane().setLayout(new java.awt.CardLayout());

        addBorrowingScreenPanel.setBackground(new java.awt.Color(51, 51, 51));
        addBorrowingScreenPanel.setPreferredSize(new java.awt.Dimension(500, 200));
        addBorrowingScreenPanel.setLayout(new java.awt.GridBagLayout());

        personNameInput.setPreferredSize(new java.awt.Dimension(100, 24));
        personNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personNameInputActionPerformed(evt);
            }
        });
        personNameInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                personNameInputKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 90;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        addBorrowingScreenPanel.add(personNameInput, gridBagConstraints);

        personGroupInput.setPreferredSize(new java.awt.Dimension(100, 24));
        personGroupInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personGroupInputActionPerformed(evt);
            }
        });
        personGroupInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                personGroupInputKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 90;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        addBorrowingScreenPanel.add(personGroupInput, gridBagConstraints);

        itemInput.setPreferredSize(new java.awt.Dimension(100, 24));
        itemInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemInputActionPerformed(evt);
            }
        });
        itemInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                itemInputKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 90;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        addBorrowingScreenPanel.add(itemInput, gridBagConstraints);

        addBorrowingConfirmButton.setBackground(new java.awt.Color(102, 0, 0));
        addBorrowingConfirmButton.setForeground(new java.awt.Color(255, 255, 255));
        addBorrowingConfirmButton.setText("Confirmar");
        addBorrowingConfirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBorrowingConfirmButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        addBorrowingScreenPanel.add(addBorrowingConfirmButton, gridBagConstraints);

        dateLabel.setForeground(new java.awt.Color(255, 255, 255));
        dateLabel.setText("Fecha Inicio");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.insets = new java.awt.Insets(0, 22, 0, 22);
        addBorrowingScreenPanel.add(dateLabel, gridBagConstraints);

        nameLabel.setForeground(new java.awt.Color(255, 255, 255));
        nameLabel.setText("Nombre(s)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        addBorrowingScreenPanel.add(nameLabel, gridBagConstraints);

        groupLabel.setForeground(new java.awt.Color(255, 255, 255));
        groupLabel.setText("Grupo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        addBorrowingScreenPanel.add(groupLabel, gridBagConstraints);

        itemLabel.setForeground(new java.awt.Color(255, 255, 255));
        itemLabel.setText("Item");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        addBorrowingScreenPanel.add(itemLabel, gridBagConstraints);

        personLastNameInput.setPreferredSize(new java.awt.Dimension(100, 24));
        personLastNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                personLastNameInputActionPerformed(evt);
            }
        });
        personLastNameInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                personLastNameInputKeyPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 90;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 15);
        addBorrowingScreenPanel.add(personLastNameInput, gridBagConstraints);

        lastNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        lastNameLabel.setText("Apellido(s)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        addBorrowingScreenPanel.add(lastNameLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 90;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
        addBorrowingScreenPanel.add(startDateInput, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 90;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        addBorrowingScreenPanel.add(jDateChooser2, gridBagConstraints);

        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("Fecha Entrega");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 15;
        addBorrowingScreenPanel.add(jLabel16, gridBagConstraints);

        addBorrowingDialog.getContentPane().add(addBorrowingScreenPanel, "card2");

        addBorrowingDialog.setLocationRelativeTo(null);

        borrowingInfoDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        borrowingInfoDialog.setTitle("Información de Prestamo");
        borrowingInfoDialog.setModal(true);
        borrowingInfoDialog.setResizable(false);
        borrowingInfoDialog.setSize(new java.awt.Dimension(400, 300));
        borrowingInfoDialog.getContentPane().setLayout(new java.awt.CardLayout());

        borrowingInfoScreenPanel.setLayout(new java.awt.GridBagLayout());

        itemInventoryInfoLabel.setText("Num Inventario:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        borrowingInfoScreenPanel.add(itemInventoryInfoLabel, gridBagConstraints);

        nameInfoLabel.setText("Nombre:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        borrowingInfoScreenPanel.add(nameInfoLabel, gridBagConstraints);

        lastNameInfoLabel.setText("Apellidos:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        borrowingInfoScreenPanel.add(lastNameInfoLabel, gridBagConstraints);

        groupInfoLabel.setText("Grupo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        borrowingInfoScreenPanel.add(groupInfoLabel, gridBagConstraints);

        startDateInfoLabel.setText("Fecha Inicio:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        borrowingInfoScreenPanel.add(startDateInfoLabel, gridBagConstraints);

        endDateInfoLabel.setText("Fecha Fin:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        borrowingInfoScreenPanel.add(endDateInfoLabel, gridBagConstraints);

        borrowerInfoLabel.setText("Prestatario:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        borrowingInfoScreenPanel.add(borrowerInfoLabel, gridBagConstraints);

        endBorrowingGoToButton.setText("Terminar Prestamo");
        endBorrowingGoToButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endBorrowingGoToButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        borrowingInfoScreenPanel.add(endBorrowingGoToButton, gridBagConstraints);

        borrowingInfoDialog.getContentPane().add(borrowingInfoScreenPanel, "card2");

        borrowingInfoDialog.setLocationRelativeTo(null);

        endBorrowingDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        endBorrowingDialog.setTitle("End Borrowing");
        endBorrowingDialog.setModal(true);
        endBorrowingDialog.setSize(new java.awt.Dimension(400, 300));

        endBorrowingScreenPanel.setLayout(new java.awt.GridBagLayout());

        endBorrowingButton.setText("Terminar Prestamo");
        endBorrowingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endBorrowingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        endBorrowingScreenPanel.add(endBorrowingButton, gridBagConstraints);

        jLabel1.setText("Fecha Final");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        endBorrowingScreenPanel.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        endBorrowingScreenPanel.add(endDateInput, gridBagConstraints);

        endBorrowingDialog.getContentPane().add(endBorrowingScreenPanel, java.awt.BorderLayout.CENTER);

        endBorrowingDialog.setLocationRelativeTo(null);

        addItemDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addItemDialog.setTitle("Añadir Item");
        addItemDialog.setMinimumSize(new java.awt.Dimension(338, 300));
        addItemDialog.setModal(true);
        addItemDialog.setResizable(false);
        addItemDialog.setSize(new java.awt.Dimension(316, 550));
        addItemDialog.getContentPane().setLayout(new java.awt.CardLayout());

        addBorrowingScreenPanel1.setBackground(new java.awt.Color(51, 51, 51));
        addBorrowingScreenPanel1.setLayout(new java.awt.GridBagLayout());

        addBorrowingConfirmButton1.setBackground(new java.awt.Color(102, 0, 0));
        addBorrowingConfirmButton1.setForeground(new java.awt.Color(255, 255, 255));
        addBorrowingConfirmButton1.setText("Añadir");
        addBorrowingConfirmButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBorrowingConfirmButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        addBorrowingScreenPanel1.add(addBorrowingConfirmButton1, gridBagConstraints);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Inventario");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel3, gridBagConstraints);

        inventarioInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(inventarioInput, gridBagConstraints);

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Posesión");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel4, gridBagConstraints);

        posesionInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(posesionInput, gridBagConstraints);

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Grupo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel5, gridBagConstraints);

        grupoInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(grupoInput, gridBagConstraints);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Categoría");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel6, gridBagConstraints);

        categoriaInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(categoriaInput, gridBagConstraints);

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("SubCategoría");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel7, gridBagConstraints);

        subcategoriaInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(subcategoriaInput, gridBagConstraints);

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Tipo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel8, gridBagConstraints);

        tipoInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(tipoInput, gridBagConstraints);

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Marca");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel9, gridBagConstraints);

        marcaInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(marcaInput, gridBagConstraints);

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Modelo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel10, gridBagConstraints);

        modeloInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(modeloInput, gridBagConstraints);

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Serie");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel11, gridBagConstraints);

        serieInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(serieInput, gridBagConstraints);

        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("Color");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel12, gridBagConstraints);

        colorInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(colorInput, gridBagConstraints);

        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("Precio");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel13, gridBagConstraints);

        precioInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(precioInput, gridBagConstraints);

        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("Estado");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel14, gridBagConstraints);

        estadoInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(estadoInput, gridBagConstraints);

        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("Propietario");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(jLabel15, gridBagConstraints);

        propietarioInput.setPreferredSize(new java.awt.Dimension(200, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        addBorrowingScreenPanel1.add(propietarioInput, gridBagConstraints);

        addItemDialog.getContentPane().add(addBorrowingScreenPanel1, "card2");

        addBorrowingDialog.setLocationRelativeTo(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        mainScreenPanel.setBackground(new java.awt.Color(0, 0, 0));
        mainScreenPanel.setForeground(new java.awt.Color(255, 255, 255));
        mainScreenPanel.setLayout(new java.awt.GridBagLayout());

        addBorrowingButton.setBackground(new java.awt.Color(102, 0, 0));
        addBorrowingButton.setForeground(new java.awt.Color(255, 255, 255));
        addBorrowingButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/agregar-producto(1).png"))); // NOI18N
        addBorrowingButton.setText("Añadir Préstamo");
        addBorrowingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBorrowingButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mainScreenPanel.add(addBorrowingButton, gridBagConstraints);

        viewCurrentBorrowingsButton.setBackground(new java.awt.Color(102, 0, 0));
        viewCurrentBorrowingsButton.setForeground(new java.awt.Color(255, 255, 255));
        viewCurrentBorrowingsButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/actual(1).png"))); // NOI18N
        viewCurrentBorrowingsButton.setText("Ver Préstamos Actuales");
        viewCurrentBorrowingsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCurrentBorrowingsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mainScreenPanel.add(viewCurrentBorrowingsButton, gridBagConstraints);

        viewHistoryButton.setBackground(new java.awt.Color(102, 0, 0));
        viewHistoryButton.setForeground(new java.awt.Color(255, 255, 255));
        viewHistoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/historial(1).png"))); // NOI18N
        viewHistoryButton.setText("Ver Historial");
        viewHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHistoryButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mainScreenPanel.add(viewHistoryButton, gridBagConstraints);

        viewInventoryButton.setBackground(new java.awt.Color(102, 0, 0));
        viewInventoryButton.setForeground(new java.awt.Color(255, 255, 255));
        viewInventoryButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/cajas(1).png"))); // NOI18N
        viewInventoryButton.setText("Ver Inventario");
        viewInventoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInventoryButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        mainScreenPanel.add(viewInventoryButton, gridBagConstraints);

        jLabel2.setBackground(new java.awt.Color(102, 0, 0));
        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("Gestor de Prestamos del CETI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.insets = new java.awt.Insets(50, 0, 50, 0);
        mainScreenPanel.add(jLabel2, gridBagConstraints);

        getContentPane().add(mainScreenPanel, "card2");

        currentBorrowingsScreenPanel.setBackground(new java.awt.Color(0, 0, 0));
        currentBorrowingsScreenPanel.setLayout(new java.awt.GridBagLayout());

        currentBorrowingsFullTable.setBackground(new java.awt.Color(255, 255, 255));
        currentBorrowingsFullTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Apellido", "Grupo", "Inventario", "Categoría", "Fecha Inicio", "Fecha Relativa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        currentBorrowingsFullTable.setSelectionBackground(new java.awt.Color(204, 255, 255));
        currentBorrowingsFullTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                currentBorrowingsFullTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(currentBorrowingsFullTable);

        currentBorrowingsScreenPanel.add(jScrollPane2, new java.awt.GridBagConstraints());

        backCurrentBorrowingsScreenButton.setText("Atrás");
        backCurrentBorrowingsScreenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backCurrentBorrowingsScreenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        currentBorrowingsScreenPanel.add(backCurrentBorrowingsScreenButton, gridBagConstraints);

        getContentPane().add(currentBorrowingsScreenPanel, "card3");

        historyScreenPanel.setBackground(new java.awt.Color(0, 0, 0));
        historyScreenPanel.setLayout(new java.awt.GridBagLayout());

        borrowingsHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Id", "Nombre", "Apellido", "Grupo", "Inventario", "Categoria", "Fecha Inicio", "Fecha Fin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(borrowingsHistoryTable);

        historyScreenPanel.add(jScrollPane3, new java.awt.GridBagConstraints());

        backHistoryScreenButton.setText("Atrás");
        backHistoryScreenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backHistoryScreenButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        historyScreenPanel.add(backHistoryScreenButton, gridBagConstraints);

        getContentPane().add(historyScreenPanel, "card4");

        inventoryScreenPanel.setBackground(new java.awt.Color(0, 0, 0));

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] {"Inventario","Posesion","Grupo","Categoria","SubCategoria","Tipo","Marca","Modelo","Serie","Color","Precio","Estado","Propietario"}));
        jScrollPane4.setViewportView(inventoryTable);

        backInventoryScreenButton.setText("Atrás");
        backInventoryScreenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backInventoryScreenButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inventoryScreenPanelLayout = new javax.swing.GroupLayout(inventoryScreenPanel);
        inventoryScreenPanel.setLayout(inventoryScreenPanelLayout);
        inventoryScreenPanelLayout.setHorizontalGroup(
            inventoryScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryScreenPanelLayout.createSequentialGroup()
                .addGroup(inventoryScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inventoryScreenPanelLayout.createSequentialGroup()
                        .addGap(374, 374, 374)
                        .addComponent(backInventoryScreenButton))
                    .addGroup(inventoryScreenPanelLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );
        inventoryScreenPanelLayout.setVerticalGroup(
            inventoryScreenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryScreenPanelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(backInventoryScreenButton))
        );

        getContentPane().add(inventoryScreenPanel, "card5");

        mainMenuBar.setBackground(new java.awt.Color(102, 0, 0));
        mainMenuBar.setForeground(new java.awt.Color(255, 255, 255));

        userMenu.setBackground(new java.awt.Color(102, 0, 0));
        userMenu.setForeground(new java.awt.Color(255, 255, 255));
        userMenu.setText("Usuario");

        addUserItem.setText("Añadir usuario");
        addUserItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserItemActionPerformed(evt);
            }
        });
        userMenu.add(addUserItem);

        endSessionItem.setText("Cerrar sesión");
        endSessionItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endSessionItemActionPerformed(evt);
            }
        });
        userMenu.add(endSessionItem);

        mainMenuBar.add(userMenu);

        borrowingsMenu.setBackground(new java.awt.Color(102, 0, 0));
        borrowingsMenu.setForeground(new java.awt.Color(255, 255, 255));
        borrowingsMenu.setText("Préstamos");

        addBorrowingItem.setText("Añadir Préstamos");
        addBorrowingItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBorrowingItemActionPerformed(evt);
            }
        });
        borrowingsMenu.add(addBorrowingItem);

        mainMenuBar.add(borrowingsMenu);

        inventoryMenu.setBackground(new java.awt.Color(102, 0, 0));
        inventoryMenu.setForeground(new java.awt.Color(255, 255, 255));
        inventoryMenu.setText("Inventario");

        viewInventoryItem.setText("Ver Inventario");
        viewInventoryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInventoryItemActionPerformed(evt);
            }
        });
        inventoryMenu.add(viewInventoryItem);

        importCsvItem.setText("Importar CSV");
        importCsvItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importCsvItemActionPerformed(evt);
            }
        });
        inventoryMenu.add(importCsvItem);

        addItemItem.setText("Añadir Item");
        addItemItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemItemActionPerformed(evt);
            }
        });
        inventoryMenu.add(addItemItem);

        mainMenuBar.add(inventoryMenu);

        aboutMenu.setBackground(new java.awt.Color(102, 0, 0));
        aboutMenu.setForeground(new java.awt.Color(255, 255, 255));
        aboutMenu.setText("Acerca de");

        aboutUsItem.setText("Sobre nosotros");
        aboutUsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutUsItemActionPerformed(evt);
            }
        });
        aboutMenu.add(aboutUsItem);

        mainMenuBar.add(aboutMenu);

        setJMenuBar(mainMenuBar);

        setSize(new java.awt.Dimension(810, 630));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addBorrowingItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBorrowingItemActionPerformed
        addBorrowingDialog.setVisible(true);
    }//GEN-LAST:event_addBorrowingItemActionPerformed

    private void addBorrowingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBorrowingButtonActionPerformed
        fechaActual = LocalDate.now();
        startDateInput.setDate(new Date());
        addBorrowingDialog.setVisible(true);
        SwingUtilities.invokeLater(() -> personNameInput.requestFocusInWindow());
    }//GEN-LAST:event_addBorrowingButtonActionPerformed

    private void viewCurrentBorrowingsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCurrentBorrowingsButtonActionPerformed
                    updateCurrentBorrowingsTable();

        currentBorrowingsScreenPanel.setVisible(true);
        mainScreenPanel.setVisible(false);
    }//GEN-LAST:event_viewCurrentBorrowingsButtonActionPerformed

    private void endBorrowingGoToButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endBorrowingGoToButtonActionPerformed
        endDateInput.setDate(new Date());
        endBorrowingDialog.setVisible(true);
    }//GEN-LAST:event_endBorrowingGoToButtonActionPerformed

    private void viewInventoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInventoryButtonActionPerformed
        inventoryScreenPanel.setVisible(true);
        mainScreenPanel.setVisible(false);
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        model.setRowCount(0);
        ItemDBController idbc = new ItemDBController();
        idbc.setUser(userLogin);
        idbc.setPassword(passwordLogin);
        String SQL="SELECT * FROM item_inventory;";
        ArrayList<Map<String, Object>> results = idbc.getQueryResult(SQL);
            for(Map<String, Object> rs : results){
                model.addRow(new Object[]{
                    rs.get("iteminventory"),
                    rs.get("itempossesion"),
                    rs.get("itemgroup"),
                    rs.get("itemcategory"),
                    rs.get("itemsubcategory"),
                    rs.get("itemtype"),
                    rs.get("itembrand"),
                    rs.get("itemmodel"),
                    rs.get("itemserie"),
                    rs.get("itemcolor"),
                    rs.get("itemprice"),
                    rs.get("itemstate"),
                    rs.get("itemowner")
                });}
    }//GEN-LAST:event_viewInventoryButtonActionPerformed

    private void viewHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHistoryButtonActionPerformed
        updateHistoryBorrowingsTable();
        historyScreenPanel.setVisible(true);
        mainScreenPanel.setVisible(false);
    }//GEN-LAST:event_viewHistoryButtonActionPerformed

    private void backCurrentBorrowingsScreenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backCurrentBorrowingsScreenButtonActionPerformed
        currentBorrowingsScreenPanel.setVisible(false);
        mainScreenPanel.setVisible(true);
    }//GEN-LAST:event_backCurrentBorrowingsScreenButtonActionPerformed

    private void backHistoryScreenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backHistoryScreenButtonActionPerformed
        historyScreenPanel.setVisible(false);
        mainScreenPanel.setVisible(true);
    }//GEN-LAST:event_backHistoryScreenButtonActionPerformed

    private void backInventoryScreenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backInventoryScreenButtonActionPerformed
        inventoryScreenPanel.setVisible(false);
        mainScreenPanel.setVisible(true);
    }//GEN-LAST:event_backInventoryScreenButtonActionPerformed

    private void viewInventoryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInventoryItemActionPerformed
        DefaultTableModel model = (DefaultTableModel) inventoryTable.getModel();
        model.setRowCount(0);
        ItemDBController idbc = new ItemDBController();
        idbc.setUser(userLogin);
        idbc.setPassword(passwordLogin);
        String SQL="SELECT * FROM item_inventory;";
        ArrayList<Map<String, Object>> results = idbc.getQueryResult(SQL);
            for(Map<String, Object> rs : results){
                model.addRow(new Object[]{
                    rs.get("iteminventory"),
                    rs.get("itempossesion"),
                    rs.get("itemgroup"),
                    rs.get("itemcategory"),
                    rs.get("itemsubcategory"),
                    rs.get("itemtype"),
                    rs.get("itembrand"),
                    rs.get("itemmodel"),
                    rs.get("itemserie"),
                    rs.get("itemcolor"),
                    rs.get("itemprice"),
                    rs.get("itemstate"),
                    rs.get("itemowner")
                });}
        inventoryScreenPanel.setVisible(true);
        mainScreenPanel.setVisible(false);
    }//GEN-LAST:event_viewInventoryItemActionPerformed

    private void endSessionItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endSessionItemActionPerformed
        //Need to put this in its own method...maybe
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginFrame().setVisible(true);
            }
        });
        this.dispose();
    }//GEN-LAST:event_endSessionItemActionPerformed

    private void aboutUsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutUsItemActionPerformed
        JOptionPane.showMessageDialog(null, "I'm Batman");
    }//GEN-LAST:event_aboutUsItemActionPerformed

    private void addBorrowingConfirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBorrowingConfirmButtonActionPerformed
        //This is a placeholder implementation
        if (!personNameInput.getText().equals("") && !startDateInput.getDateFormatString().equals("") && !personLastNameInput.getText().equals("") && !personGroupInput.getText().equals("") && !itemInput.getText().equals("")){
           SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            String fechaFormateada = formato.format(startDateInput.getDate());
            String fechaFinFormateada = formato.format(jDateChooser2.getDate());
            BorrowingsDBController bdbc = new BorrowingsDBController();
            bdbc.setUser(userLogin);
            bdbc.setPassword(passwordLogin);
            Borrowing borrowing = new Borrowing(itemInput.getText(),startDateInput.getDate(),jDateChooser2.getDate(),personNameInput.getText(),personLastNameInput.getText(),personGroupInput.getText());
            bdbc.insertBorrowing(borrowing);
            updateCurrentBorrowingsTable();
            addBorrowingDialog.dispose();
        }
        else{
            JOptionPane.showMessageDialog(null,"Rellena todos los campos");
        }
    }//GEN-LAST:event_addBorrowingConfirmButtonActionPerformed

    private void updateCurrentBorrowingsTable() {
        DefaultTableModel model = (DefaultTableModel) currentBorrowingsFullTable.getModel();
        model.setRowCount(0);
        DBController dbc = new DBController();
        dbc.setUser(userLogin);
        dbc.setPassword(passwordLogin);
        String SQL = "SELECT * FROM borrowings,item_inventory WHERE ended=false AND borrowings.iteminventory=item_inventory.iteminventory";
        ArrayList<Map<String,Object>> currentBorrowings = dbc.getQueryResult(SQL);
        for(Map<String,Object> item : currentBorrowings) {
            model.addRow(new Object[]{
                item.get("borrowingid").toString(),
                item.get("personname"),
                item.get("personlastname"),
                item.get("persongroup"),
                item.get("iteminventory"),
                item.get("itemcategory"),
                item.get("startdate").toString(),
                item.get("relativeenddate").toString()
            });
        }
    }
    
    private void updateHistoryBorrowingsTable() {
        DefaultTableModel model = (DefaultTableModel) borrowingsHistoryTable.getModel();
        model.setRowCount(0);
        DBController dbc = new DBController();
        dbc.setUser(userLogin);
        dbc.setPassword(passwordLogin);
        String SQL = "SELECT * FROM borrowings,item_inventory WHERE ended=true AND borrowings.iteminventory=item_inventory.iteminventory";
        ArrayList<Map<String,Object>> currentBorrowings = dbc.getQueryResult(SQL);
        for(Map<String,Object> item : currentBorrowings) {
            model.addRow(new Object[]{
                item.get("borrowingid").toString(),
                item.get("personname"),
                item.get("personlastname"),
                item.get("persongroup"),
                item.get("iteminventory"),
                item.get("itemcategory"),
                item.get("startdate").toString(),
                item.get("relativeenddate").toString()
            });
        }
    }
    
    private void addUserItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserItemActionPerformed
        //Need to put this in its own method...maybe
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                LoginFrame lf=new LoginFrame();
                lf.setVisible(true);
                lf.getLoginPanel().setVisible(false);
                lf.getRegisterPanel().setVisible(true);
                lf.setUserLogin(userLogin);
                lf.setPasswordLogin(passwordLogin);
            }
        });
        this.dispose();
    }//GEN-LAST:event_addUserItemActionPerformed

    private void addItemItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemItemActionPerformed
    addItemDialog.setVisible(true);
    }//GEN-LAST:event_addItemItemActionPerformed

    private void addBorrowingConfirmButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBorrowingConfirmButton1ActionPerformed
        if(validarTipo() && validarVacio()){
            Item item = new Item(Integer.parseInt(inventarioInput.getText()),
            posesionInput.getText(),
            grupoInput.getText(),
            categoriaInput.getText(),
            subcategoriaInput.getText(),
            tipoInput.getText(),
            marcaInput.getText(),
            modeloInput.getText(),
            serieInput.getText(),
            colorInput.getText(),
            Float.parseFloat(precioInput.getText()),
            estadoInput.getText(),
            propietarioInput.getText());
            ItemDBController idbc = new ItemDBController();
            idbc.setUser(userLogin);
            idbc.setPassword(passwordLogin);
            idbc.insertItem(item);
            JOptionPane.showMessageDialog(null, "Insertado exitosamente");
            limpiar();
        }
        else{
            JOptionPane.showMessageDialog(null, "Algun campo está vacio o algun dato es erroneo");
        }
        
    }//GEN-LAST:event_addBorrowingConfirmButton1ActionPerformed

    private void importCsvItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importCsvItemActionPerformed
        // TODO add your handling code here:
        DBController dbc = new DBController();
        dbc.setUser(userLogin);
        dbc.setPassword(passwordLogin);
        JFileChooser fileChooser = new JFileChooser();
        int returnVal = fileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            System.out.println(fileChooser.getSelectedFile().toString());
            int check = dbc.importCSVWithPsql(fileChooser.getSelectedFile().toString(),userLogin,passwordLogin);
            if(check==1) {
                JOptionPane.showMessageDialog(this, "Importado exitosamente");
            }
            else {
                JOptionPane.showMessageDialog(this, "Error importando el archivo");
            }
        }
    }//GEN-LAST:event_importCsvItemActionPerformed

    private void currentBorrowingsFullTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_currentBorrowingsFullTableMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
                    evt.consume(); // Consumir el evento para evitar duplicados
                    int filaSeleccionada = currentBorrowingsFullTable.getSelectedRow();
                    if (filaSeleccionada != -1) { // Verificar que se seleccionó una fila
                        int id = Integer.parseInt((String) currentBorrowingsFullTable.getModel().getValueAt(filaSeleccionada, 0));
                        System.out.println((String) currentBorrowingsFullTable.getModel().getValueAt(filaSeleccionada, 0));
                        String numInventario = (String)currentBorrowingsFullTable.getModel().getValueAt(filaSeleccionada, 3);
                        String nombrePersona = (String)currentBorrowingsFullTable.getModel().getValueAt(filaSeleccionada, 1);
                        String apellidoPersona = (String)currentBorrowingsFullTable.getModel().getValueAt(filaSeleccionada, 2);
                        String grupoPersona = (String)currentBorrowingsFullTable.getModel().getValueAt(filaSeleccionada, 4);
                        String fechaInicio = (String)currentBorrowingsFullTable.getModel().getValueAt(filaSeleccionada, 5);
                        String fechaFin = (String)currentBorrowingsFullTable.getModel().getValueAt(filaSeleccionada, 6);
                        String prestatario = userLogin;
                        bc = new BorrowingInfo(id,numInventario,nombrePersona,apellidoPersona,grupoPersona,fechaInicio,fechaFin,prestatario);
                        itemInventoryInfoLabel.setText("Num Inventario: "+bc.getNumInventario());
                        nameInfoLabel.setText("Nombre(s): "+bc.getNombrePersona());
                        lastNameInfoLabel.setText("Apellido(s): "+bc.getApellidoPersona());
                        groupInfoLabel.setText("Grupo: "+bc.getGrupoPersona());
                        startDateInfoLabel.setText("Fecha Inicio: "+bc.getFechaInicio());
                        endDateInfoLabel.setText("Fecha Fin: "+bc.getFechaFin());
                        borrowerInfoLabel.setText("Prestatario: "+bc.getPrestatario());
                        borrowingInfoDialog.setVisible(true);
                    }
                }
    }//GEN-LAST:event_currentBorrowingsFullTableMouseClicked

    private void personNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personNameInputActionPerformed
    personLastNameInput.requestFocus();
    }//GEN-LAST:event_personNameInputActionPerformed

    private void personLastNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personLastNameInputActionPerformed
    personGroupInput.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_personLastNameInputActionPerformed

    private void personGroupInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_personGroupInputActionPerformed
    itemInput.requestFocus();        // TODO add your handling code here:
    }//GEN-LAST:event_personGroupInputActionPerformed

    private void itemInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemInputActionPerformed
    //This is a placeholder implementation
        if (!personNameInput.getText().equals("") && !startDateInput.getDateFormatString().equals("") && !personLastNameInput.getText().equals("") && !personGroupInput.getText().equals("") && !itemInput.getText().equals("")){
           SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
            String fechaFormateada = formato.format(startDateInput.getDate());
            String fechaFinFormateada = formato.format(jDateChooser2.getDate());
            DefaultTableModel model = (DefaultTableModel) currentBorrowingsFullTable.getModel();
            model.addRow(new Object[]{
                personNameInput.getText(),
                personLastNameInput.getText(),
                personGroupInput.getText(),
                itemInput.getText(),
                "PC",
                fechaFormateada,
                fechaFinFormateada
            });
            addBorrowingDialog.dispose();
        }
        else{
            JOptionPane.showMessageDialog(null,"Rellena todos los campos");
        }        // TODO add your handling code here:
    }//GEN-LAST:event_itemInputActionPerformed

    private void personNameInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_personNameInputKeyPressed
    soloLetras(personNameInput);        // TODO add your handling code here:
    }//GEN-LAST:event_personNameInputKeyPressed

    private void personLastNameInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_personLastNameInputKeyPressed
    soloLetras(personLastNameInput);        // TODO add your handling code here:
    }//GEN-LAST:event_personLastNameInputKeyPressed

    private void personGroupInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_personGroupInputKeyPressed
    letrasYNumeros(personGroupInput);        // TODO add your handling code here:
    }//GEN-LAST:event_personGroupInputKeyPressed

    private void itemInputKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_itemInputKeyPressed
    soloNumeros(itemInput);        // TODO add your handling code here:
    }//GEN-LAST:event_itemInputKeyPressed

    private void endBorrowingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endBorrowingButtonActionPerformed
         // TODO add your handling code here:
        BorrowingsDBController bdbc = new BorrowingsDBController();
        bdbc.setUser(userLogin);
        bdbc.setPassword(passwordLogin);
        System.out.println(bc.getId());
        java.sql.Date sqlStartDate = new java.sql.Date(endDateInput.getDate().getTime());
        bdbc.endBorrowing(sqlStartDate, bc.getId());
        endBorrowingDialog.dispose();
        borrowingInfoDialog.dispose();
    }//GEN-LAST:event_endBorrowingButtonActionPerformed

    private void limpiar() {
        inventarioInput.setText("");
        posesionInput.setText("");
        grupoInput.setText("");
        categoriaInput.setText("");
        subcategoriaInput.setText("");
        tipoInput.setText("");
        marcaInput.setText("");
        modeloInput.setText("");
        serieInput.setText("");
        colorInput.setText("");
        precioInput.setText("");
        estadoInput.setText("");
        propietarioInput.setText("");
    }
    
    private boolean validarVacio() {
        if(inventarioInput.getText().isEmpty() ||
        posesionInput.getText().isEmpty() ||
        grupoInput.getText().isEmpty() ||
        categoriaInput.getText().isEmpty() ||
        subcategoriaInput.getText().isEmpty() ||
        tipoInput.getText().isEmpty() ||
        marcaInput.getText().isEmpty() ||
        modeloInput.getText().isEmpty() ||
        serieInput.getText().isEmpty() ||
        colorInput.getText().isEmpty() ||
        precioInput.getText().isEmpty() ||
        estadoInput.getText().isEmpty() ||
        propietarioInput.getText().isEmpty()){
            return false;
        }
        else{
            return true;
        }
    }
    
    private boolean validarTipo() {
        try{
            Integer.parseInt(inventarioInput.getText());
            Float.parseFloat(precioInput.getText());
            return true;
        }
        catch(Exception e){
            return false;
        }
    }
     // Función: Solo letras
    public void soloLetras(JTextField textField) {
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isLetter(c)) {
                    e.consume(); // Bloquear el carácter no permitido
                }
            }
        });
    }

    // Función: Solo números
    public void soloNumeros(JTextField textField) {
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isDigit(c)) {
                    e.consume(); // Bloquear el carácter no permitido
                }
            }
        });
    }

    // Función: Letras y números
    public void letrasYNumeros(JTextField textField) {
        textField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                char c = e.getKeyChar();
                if (!Character.isLetterOrDigit(c)) {
                    e.consume(); // Bloquear el carácter no permitido
                }
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;
    private javax.swing.JMenuItem aboutUsItem;
    private javax.swing.JButton addBorrowingButton;
    private javax.swing.JButton addBorrowingConfirmButton;
    private javax.swing.JButton addBorrowingConfirmButton1;
    private javax.swing.JDialog addBorrowingDialog;
    private javax.swing.JMenuItem addBorrowingItem;
    private javax.swing.JPanel addBorrowingScreenPanel;
    private javax.swing.JPanel addBorrowingScreenPanel1;
    private javax.swing.JDialog addItemDialog;
    private javax.swing.JMenuItem addItemItem;
    private javax.swing.JMenuItem addUserItem;
    private javax.swing.JButton backCurrentBorrowingsScreenButton;
    private javax.swing.JButton backHistoryScreenButton;
    private javax.swing.JButton backInventoryScreenButton;
    private javax.swing.JLabel borrowerInfoLabel;
    private javax.swing.JDialog borrowingInfoDialog;
    private javax.swing.JPanel borrowingInfoScreenPanel;
    private javax.swing.JTable borrowingsHistoryTable;
    private javax.swing.JMenu borrowingsMenu;
    private javax.swing.JTextField categoriaInput;
    private javax.swing.JTextField colorInput;
    private javax.swing.JTable currentBorrowingsFullTable;
    private javax.swing.JPanel currentBorrowingsScreenPanel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton endBorrowingButton;
    private javax.swing.JDialog endBorrowingDialog;
    private javax.swing.JButton endBorrowingGoToButton;
    private javax.swing.JPanel endBorrowingScreenPanel;
    private javax.swing.JLabel endDateInfoLabel;
    private com.toedter.calendar.JDateChooser endDateInput;
    private javax.swing.JMenuItem endSessionItem;
    private javax.swing.JTextField estadoInput;
    private javax.swing.JLabel groupInfoLabel;
    private javax.swing.JLabel groupLabel;
    private javax.swing.JTextField grupoInput;
    private javax.swing.JPanel historyScreenPanel;
    private javax.swing.JMenuItem importCsvItem;
    private javax.swing.JTextField inventarioInput;
    private javax.swing.JMenu inventoryMenu;
    private javax.swing.JPanel inventoryScreenPanel;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JTextField itemInput;
    private javax.swing.JLabel itemInventoryInfoLabel;
    private javax.swing.JLabel itemLabel;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lastNameInfoLabel;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JPanel mainScreenPanel;
    private javax.swing.JTextField marcaInput;
    private javax.swing.JTextField modeloInput;
    private javax.swing.JLabel nameInfoLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField personGroupInput;
    private javax.swing.JTextField personLastNameInput;
    private javax.swing.JTextField personNameInput;
    private javax.swing.JTextField posesionInput;
    private javax.swing.JTextField precioInput;
    private javax.swing.JTextField propietarioInput;
    private javax.swing.JTextField serieInput;
    private javax.swing.JLabel startDateInfoLabel;
    private com.toedter.calendar.JDateChooser startDateInput;
    private javax.swing.JTextField subcategoriaInput;
    private javax.swing.JTextField tipoInput;
    private javax.swing.JMenu userMenu;
    private javax.swing.JButton viewCurrentBorrowingsButton;
    private javax.swing.JButton viewHistoryButton;
    private javax.swing.JButton viewInventoryButton;
    private javax.swing.JMenuItem viewInventoryItem;
    // End of variables declaration//GEN-END:variables
}
